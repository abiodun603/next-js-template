import {createStore, AnyAction, Store} from 'redux';
import {createWrapper, Context, HYDRATE} from 'next-redux-wrapper';
import { combineReducers, configureStore } from '@reduxjs/toolkit';
import { persistReducer } from 'redux-persist';

//COMBINING ALL REDUCERS
const rootReducer = combineReducers({
  // OTHER REDUCERS WILL BE ADDED HERE
});

const makeStore = ({ isServer }) => {
  if (isServer) {
    //If it's on server side, create a store
    return configureStore({ reducer: rootReducer, devTools: true });
  } else {
    //If it's on client side, create a store which will persist
    const { persistStore, persistReducer } = require('redux-persist');

    const persistConfig = {
      key: 'nextjs',
      whitelist: ['counter'], // only counter will be persisted, add other reducers if needed
      storage: Storage, // if needed, use a safer storage
    };

    // Create a new reducer with our existing reducer
    const persistedReducer = persistReducer(persistConfig, rootReducer);

   const store = configureStore({
      reducer: persistedReducer,
      devTools: true,
    });
    store.__persistor = persistStore(store); // This creates a persistor object & push that persisted object to .__persistor, so that we can avail the persistability feature

    return store;
  }// Creating the store again

}


// Export the wrapper & wrap the pages/_app.js with this wrapper only
export const wrapper = createWrapper<Store<State>>(makeStore, {debug: true});